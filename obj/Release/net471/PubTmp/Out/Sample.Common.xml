<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sample.Common</name>
    </assembly>
    <members>
        <member name="T:Sample.Common.Authentication.AuthenticationProvider">
            <summary>
            The authentication provider for this bot instance.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider" />
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.appName">
            <summary>
            The application name.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.appId">
            <summary>
            The application identifier.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.appSecret">
            <summary>
            The application secret.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.openIdConfigRefreshInterval">
            <summary>
            The open ID configuration refresh interval.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.prevOpenIdConfigUpdateTimestamp">
            <summary>
            The previous update timestamp for OpenIdConfig.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.AuthenticationProvider.openIdConfiguration">
            <summary>
            The open identifier configuration.
            </summary>
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationProvider.#ctor(System.String,System.String,System.String,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.Authentication.AuthenticationProvider" /> class.
            </summary>
            <param name="appName">The application name.</param>
            <param name="appId">The application identifier.</param>
            <param name="appSecret">The application secret.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationProvider.AuthenticateOutboundRequestAsync(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Authenticates the specified request message.
            This method will be called any time there is an outbound request.
            In this case we are using the Microsoft.IdentityModel.Clients.ActiveDirectory library
            to stamp the outbound http request with the OAuth 2.0 token using an AAD application id
            and application secret.  Alternatively, this method can support certificate validation.
            </summary>
            <param name="request">The request.</param>
            <param name="tenant">The tenant.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationProvider.ValidateInboundRequestAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Validates the request asynchronously.
            This method will be called any time we have an incoming request.
            Returning invalid result will trigger a Forbidden response.
            </summary>
            <param name="request">The request.</param>
            <returns>
            The <see cref="T:Microsoft.Graph.Communications.Client.Authentication.RequestValidationResult" /> structure.
            </returns>
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationProvider.AcquireTokenWithRetryAsync(Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext,System.String,Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,System.Int32)">
            <summary>
            Acquires the token and retries if failure occurs.
            </summary>
            <param name="context">The application context.</param>
            <param name="resource">The resource.</param>
            <param name="creds">The application credentials.</param>
            <param name="attempts">The attempts.</param>
            <returns>
            The <see cref="T:Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult" />.
            </returns>
        </member>
        <member name="T:Sample.Common.Authentication.AuthenticationWrapper">
            <summary>
            A wrapper for the <see cref="T:Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider"/>
            that maps to the <see cref="T:Microsoft.Graph.IAuthenticationProvider"/>.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider" />
            <seealso cref="T:Microsoft.Graph.IAuthenticationProvider" />
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationWrapper.#ctor(Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.Authentication.AuthenticationWrapper"/> class.
            </summary>
            <param name="authenticationProvider">The authentication provider.</param>
            <param name="tenant">The tenant.</param>
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationWrapper.AuthenticateOutboundRequestAsync(System.Net.Http.HttpRequestMessage,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationWrapper.ValidateInboundRequestAsync(System.Net.Http.HttpRequestMessage)">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Authentication.AuthenticationWrapper.AuthenticateRequestAsync(System.Net.Http.HttpRequestMessage)">
            <inheritdoc />
        </member>
        <member name="T:Sample.Common.Authentication.UserPasswordAuthenticationProvider">
            <summary>
            Authentication provider to add .
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.UserPasswordAuthenticationProvider.appName">
            <summary>
            The application name.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.UserPasswordAuthenticationProvider.appId">
            <summary>
            Gets the application identifier.
            </summary>
            <value>
            The application identifier.
            </value>
        </member>
        <member name="F:Sample.Common.Authentication.UserPasswordAuthenticationProvider.appSecret">
            <summary>
            Gets the application secret.
            </summary>
            <value>
            The application secret.
            </value>
        </member>
        <member name="F:Sample.Common.Authentication.UserPasswordAuthenticationProvider.userName">
            <summary>
            Gets UserName to be passed to oauth service.
            </summary>
        </member>
        <member name="F:Sample.Common.Authentication.UserPasswordAuthenticationProvider.password">
            <summary>
            Gets password to be passed to oauth service.
            </summary>
        </member>
        <member name="M:Sample.Common.Authentication.UserPasswordAuthenticationProvider.#ctor(System.String,System.String,System.String,System.String,System.String,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.Authentication.UserPasswordAuthenticationProvider"/> class.
            </summary>
            <param name="appName">The application name.</param>
            <param name="appId">The application identifier.</param>
            <param name="appSecret">The application secret.</param>
            <param name="userName">The username to be used.</param>
            <param name="password">Password assoicated with the passed username.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Sample.Common.Authentication.UserPasswordAuthenticationProvider.AuthenticateOutboundRequestAsync(System.Net.Http.HttpRequestMessage,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Authentication.UserPasswordAuthenticationProvider.ValidateInboundRequestAsync(System.Net.Http.HttpRequestMessage)">
            <inheritdoc />
        </member>
        <member name="T:Sample.Common.Authentication.UserPasswordAuthenticationProvider.OAuthResponse">
            <summary>
            Response received from oauth service.
            </summary>
        </member>
        <member name="P:Sample.Common.Authentication.UserPasswordAuthenticationProvider.OAuthResponse.Access_Token">
            <summary>
            Gets or Sets access token.
            </summary>
        </member>
        <member name="P:Sample.Common.Authentication.UserPasswordAuthenticationProvider.OAuthResponse.Expires_In">
            <summary>
             Gets or Sets expires time.
            </summary>
        </member>
        <member name="T:Sample.Common.CommonUtilities">
            <summary>
            The utility class.
            </summary>
        </member>
        <member name="M:Sample.Common.CommonUtilities.ForgetAndLogExceptionAsync(System.Threading.Tasks.Task,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Extension for Task to execute the task in background and log any exception.
            </summary>
            <param name="task">Task to execute and capture any exceptions.</param>
            <param name="logger">Graph logger.</param>
            <param name="description">Friendly description of the task for debugging purposes.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Sample.Common.HeartbeatHandler">
            <summary>
            The base class for handling heartbeats.
            </summary>
        </member>
        <member name="M:Sample.Common.HeartbeatHandler.#ctor(System.TimeSpan,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.HeartbeatHandler"/> class.
            </summary>
            <param name="frequency">The frequency of the heartbeat.</param>
            <param name="logger">The graph logger.</param>
        </member>
        <member name="M:Sample.Common.HeartbeatHandler.HeartbeatAsync(System.Timers.ElapsedEventArgs)">
            <summary>
            This function is called whenever the heartbeat frequency has ellapsed.
            </summary>
            <param name="args">The elapsed event args.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Sample.Common.HeartbeatHandler.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sample.Common.HeartbeatHandler.HeartbeatDetected(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The heartbeat function.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The elapsed event args.</param>
        </member>
        <member name="T:Sample.Common.Logging.SampleObserver">
            <summary>
            Memory logger for quick diagnostics.
            Note: Do not use in production code.
            </summary>
        </member>
        <member name="F:Sample.Common.Logging.SampleObserver.subscription">
            <summary>
            Observer subscription.
            </summary>
        </member>
        <member name="F:Sample.Common.Logging.SampleObserver.logs">
            <summary>
            Linked list representing the logs.
            </summary>
        </member>
        <member name="F:Sample.Common.Logging.SampleObserver.lockLogs">
            <summary>
            Lock for securing logs.
            </summary>
        </member>
        <member name="F:Sample.Common.Logging.SampleObserver.formatter">
            <summary>
            The formatter.
            </summary>
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.Logging.SampleObserver" /> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.GetLogs(System.Int32,System.Int32)">
            <summary>
            Get the complete or portion of the logs.
            </summary>
            <param name="skip">Skip number of entries.</param>
            <param name="take">Pagination size.</param>
            <returns>Log entries.</returns>
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.GetLogs(System.String,System.Int32,System.Int32)">
            <summary>
            Get the complete or portion of the logs.
            </summary>
            <param name="filter">The filter.</param>
            <param name="skip">Skip number of entries.</param>
            <param name="take">Pagination size.</param>
            <returns>
            Log entries.
            </returns>
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.OnNext(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.OnError(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.OnCompleted">
            <inheritdoc />
        </member>
        <member name="M:Sample.Common.Logging.SampleObserver.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Sample.Common.Meetings.JoinInfo">
            <summary>
            Gets the join information.
            </summary>
        </member>
        <member name="M:Sample.Common.Meetings.JoinInfo.ParseJoinURL(System.String)">
            <summary>
            Parse Join URL into its components.
            </summary>
            <param name="joinURL">Join URL from Team's meeting body.</param>
            <returns>Parsed data.</returns>
        </member>
        <member name="T:Sample.Common.Meetings.JoinInfo.Context">
            <summary>
            Join URL context.
            </summary>
        </member>
        <member name="P:Sample.Common.Meetings.JoinInfo.Context.Tid">
            <summary>
            Gets or sets the Tenant Id.
            </summary>
        </member>
        <member name="P:Sample.Common.Meetings.JoinInfo.Context.Oid">
            <summary>
            Gets or sets the AAD object id of the user.
            </summary>
        </member>
        <member name="P:Sample.Common.Meetings.JoinInfo.Context.MessageId">
            <summary>
            Gets or sets the chat message id.
            </summary>
        </member>
        <member name="T:Sample.Common.OnlineMeetings.OnlineMeetingHelper">
            <summary>
            Online meeting class to fetch meeting info based of meeting id (ex: vtckey).
            </summary>
        </member>
        <member name="M:Sample.Common.OnlineMeetings.OnlineMeetingHelper.#ctor(Microsoft.Graph.Communications.Client.Authentication.IRequestAuthenticationProvider,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Sample.Common.OnlineMeetings.OnlineMeetingHelper"/> class.
            </summary>
            <param name="requestAuthenticationProvider">The request authentication provider.</param>
            <param name="graphUri">The graph url.</param>
        </member>
        <member name="M:Sample.Common.OnlineMeetings.OnlineMeetingHelper.GetOnlineMeetingAsync(System.String,System.String,System.Guid)">
            <summary>
            Gets the online meeting.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="videoTeleconferenceId">The cloud-video-interop meeting identifier.</param>
            <param name="scenarioId">The scenario identifier.</param>
            <returns>The online meeting. </returns>
        </member>
        <member name="T:Sample.Common.Transport.GraphClientExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.
            </summary>
        </member>
        <member name="M:Sample.Common.Transport.GraphClientExtensions.SendAsync``2(Microsoft.Graph.Communications.Common.Transport.IGraphClient,Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Sends the asynchronous.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="client">The client.</param>
            <param name="request">The request.</param>
            <param name="tenant">The tenant.</param>
            <param name="scenarioId">The scenario identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Transport.GraphClientExtensions.SendAsync``1(Microsoft.Graph.Communications.Common.Transport.IGraphClient,Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Sends the asynchronous.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="client">The client.</param>
            <param name="request">The request.</param>
            <param name="tenant">The tenant.</param>
            <param name="scenarioId">The scenario identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Transport.GraphClientExtensions.SendAsync``1(Microsoft.Graph.Communications.Common.Transport.IGraphClient,Microsoft.Graph.IBaseRequest,Microsoft.Graph.Communications.Common.Transport.RequestType,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Sends the request asynchronously.
            </summary>
            <typeparam name="T"><see cref="T:System.Type" /> of the content present in the response.</typeparam>
            <param name="client">The client.</param>
            <param name="request">The request.</param>
            <param name="requestType">Type of the request.</param>
            <param name="tenant">The tenant.</param>
            <param name="scenarioId">The scenario identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> returning the generic type.
            </returns>
        </member>
        <member name="M:Sample.Common.Transport.GraphClientExtensions.SendAsync(Microsoft.Graph.Communications.Common.Transport.IGraphClient,Microsoft.Graph.IBaseRequest,Microsoft.Graph.Communications.Common.Transport.RequestType,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Sends the request asynchronously.
            </summary>
            <param name="client">The client.</param>
            <param name="request">The request.</param>
            <param name="requestType">Type of the request.</param>
            <param name="tenant">The tenant.</param>
            <param name="scenarioId">The scenario identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Transport.GraphClientExtensions.CreateGraphRequest(Microsoft.Graph.IBaseRequest,Microsoft.Graph.Communications.Common.Transport.RequestType)">
            <summary>
            Creates the graph request.
            This extracts the `RequestBody` object from the `IBaseRequest`.
            </summary>
            <param name="request">The request.</param>
            <param name="requestType">Type of the request.</param>
            <returns>
            The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1" /> from the given <see cref="T:Microsoft.Graph.IBaseRequest" />.
            </returns>
        </member>
        <member name="T:Sample.Common.Utils.CallParticipantCollectionExtensions">
            <summary>
            The call extensions.
            </summary>
        </member>
        <member name="M:Sample.Common.Utils.CallParticipantCollectionExtensions.WaitForParticipantAsync(Microsoft.Graph.Communications.Calls.IParticipantCollection,System.Func{Microsoft.Graph.Communications.Calls.IParticipant,System.Boolean},System.String,System.TimeSpan)">
            <summary>
            Waits for the specified participant to join the call asynchronously.
            </summary>
            <param name="participants">The participants collection.</param>
            <param name="match">The match function.</param>
            <param name="failureMessage">The failure message.</param>
            <param name="timeOut">The time out.</param>
            <returns>
            The joined <see cref="T:Microsoft.Graph.Communications.Calls.IParticipant" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Utils.CallParticipantCollectionExtensions.WaitForParticipantAsync(Microsoft.Graph.Communications.Calls.IParticipantCollection,System.String,System.String,System.TimeSpan)">
            <summary>
            Waits for the specified participant to join the call asynchronously.
            </summary>
            <param name="participants">The participants collection.</param>
            <param name="participantId">The participant identifier.</param>
            <param name="failureMessage">The failure message.</param>
            <param name="timeOut">The time out.</param>
            <returns>
            The joined <see cref="T:Microsoft.Graph.Communications.Calls.IParticipant" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Utils.CallParticipantCollectionExtensions.WaitForRemovedParticipantAsync(Microsoft.Graph.Communications.Calls.IParticipantCollection,System.Func{Microsoft.Graph.Communications.Calls.IParticipant,System.Boolean},System.String,System.TimeSpan)">
            <summary>
            Waits for the specified participant to be removed from the call asynchronously.
            </summary>
            <param name="participants">The participants collection.</param>
            <param name="match">The match function.</param>
            <param name="failureMessage">The failure message.</param>
            <param name="timeOut">The time out.</param>
            <returns>
            The removed <see cref="T:Microsoft.Graph.Communications.Calls.IParticipant" />.
            </returns>
        </member>
        <member name="T:Sample.Common.Utils.ResourceExtensions">
            <summary>
            Resource extensions for testing.
            </summary>
        </member>
        <member name="M:Sample.Common.Utils.ResourceExtensions.WaitForUpdateAsync``2(``0,System.Func{Microsoft.Graph.Communications.Resources.ResourceEventArgs{``1},System.Boolean},System.String,System.TimeSpan)">
            <summary>
            Waits for the matching update asynchronously.
            </summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="resource">The resource.</param>
            <param name="match">The match.</param>
            <param name="failureMessage">The failure message.</param>
            <param name="timeout">The timeout.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:Sample.Common.Utils.ResourceExtensions.WaitForUpdateAsync``3(``0,System.Func{Microsoft.Graph.Communications.Resources.CollectionEventArgs{``1},``1},System.String,System.TimeSpan)">
            <summary>
            Waits for the matching update asynchronously.
            </summary>
            <typeparam name="TResourceCollection">The type of the resource collection.</typeparam>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="resourceCollection">The resource collection.</param>
            <param name="match">The match.</param>
            <param name="failureMessage">The failure message.</param>
            <param name="timeout">The timeout.</param>
            <returns>
            The matching <see cref="T:Microsoft.Graph.Communications.Resources.IResource`2" />.
            </returns>
        </member>
        <member name="T:Sample.Common.Utils.TaskExtensions">
            <summary>
            Extensions for asyncronous <see cref="T:System.Threading.Tasks.Task"/> management.
            </summary>
        </member>
        <member name="M:Sample.Common.Utils.TaskExtensions.ValidateAsync(System.Threading.Tasks.Task,System.TimeSpan,System.String)">
            <summary>
            Validates the asynchronous.
            </summary>
            <param name="task">The task.</param>
            <param name="delay">The delay.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:Sample.Common.Utils.TaskExtensions.ValidateAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String)">
            <summary>
            Validates the asynchronous.
            </summary>
            <typeparam name="T">The task return value type.</typeparam>
            <param name="task">The task.</param>
            <param name="delay">The delay.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        </member>
        <member name="M:Sample.Common.Utils.TaskExtensions.ForgetAndLogException(System.Threading.Tasks.Task,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Extension for Task to execute the task in background and log any exception.
            </summary>
            <param name="task">The task.</param>
            <param name="logger">The logger.</param>
            <param name="description">The description.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
    </members>
</doc>
